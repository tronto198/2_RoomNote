set time zone 'Asia/Seoul';

drop table if exists usertable cascade;
create table usertable(
	user_id int primary key generated by default as identity
);


drop table if exists roomtable cascade;
create table roomtable(
	room_id int primary key generated by default as identity,
	room_title text unique,
	room_passwd char(64),
	last_modifyed timestamptz default null,
	limit_time timestamptz default now() + '10 min'
);

drop table if exists user_room cascade;
create table user_room(
	user_id int,
	room_id int,
	user_nickname text,
	last_fetch_date timestamptz,
	primary key(user_id, room_id),
	foreign key(user_id) references usertable(user_id),
	foreign key(room_id) references roomtable(room_id)
	on delete cascade
);

drop table if exists chatlist cascade;
create table chatlist(
	room_id int,
	user_id int,
	contents text,
	chat_time timestamptz default now(),
	foreign key(room_id) references roomtable(room_id)
	on delete cascade,
	foreign key(user_id) references usertable(user_id)
);


create or replace function chatted()
returns trigger as $$
	begin
		update roomtable set last_modifyed = new.chat_time where roomtable.room_id = new.room_id;
		return new;
	end;
$$ language plpgsql;

create trigger chatted_trigger
after insert on chatlist
	for each row
		execute procedure chatted();

	
--insert into roomtable 
--values(default, 'title', 'password', now(), now() + '10 min') returning room_id;
select * from roomtable;
select * from user_room;
